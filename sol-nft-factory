#!/usr/bin/env bash
#######################################################################
# Candy-Machine Deploy Script                                         #
# ------------------------------------------------------------------- #
# Authors: jrod091, blackranger07                                     #
# Copyright SOLadies, 2021                                            #
#                                                                     #
# Description:                                                        #
# This script sets up a metaplex store and candy machine for batch    #
# minting from scratch.                                               #
#######################################################################

if [ `whoami` = root ]; then # exit if running as root
   echo "${red}Script cannot be run as root!${normal}"
   exit 1
fi

## SET COLORS IF TERMINAL SUPPORTS IT
if test -t 1; then # if terminal
   ncolors=$(which tput > /dev/null && tput colors) # supports color
   if test -n "$ncolors" && test $ncolors -ge 8; then
      termcols=$(tput cols)
      bold="$(tput bold)"
      underline="$(tput smul)"
      standout="$(tput smso)"
      normal="$(tput sgr0)"
      black="$(tput setaf 0)"
      red="$(tput setaf 1)"
      green="$(tput setaf 2)"
      yellow="$(tput setaf 3)"
      blue="$(tput setaf 4)"
      magenta="$(tput setaf 5)"
      cyan="$(tput setaf 6)"
      white="$(tput setaf 7)"
      orange="$(tput setaf 166)"
   fi
fi

## VARIABLES
network=''
pubkey=''
price=0
current_dir=$(pwd)
log_file="${current_dir}/sol-nft-factory_error.log"
metaplex_dir="${current_dir}/metaplex"
assets_dir="${current_dir}/assets"
js_dir="${metaplex_dir}/js"
web_dir="${js_dir}/packages/web"
cm_cli="${js_dir}/packages/cli/src/candy-machine-cli.ts"
num_imgs=''
distro=''
subcommand=''
github_name=''
sitename=''
sitepath="${web_dir}/src"
storename=''
logo_path=''
banner=''
header=''
subheader=''
gradient="background: linear-gradient(180deg, rgba(18, 18, 18, 0) 0%, @black-100 100%);"
no_gradient="background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 100%);"
ssh_priv="${HOME}/.ssh/id_ed25519"
ssh_pub="${ssh_priv}.pub"
gh_token=''

## FUNCTIONS
help_print() { # print help text
   cat <<EOF
Usage: sol-nft-factory <command> <options>

Commands:
   initial_full   setup Metaplex store plus customizations and setup candy machine and mint images
   initial_mint   setup candy machine and mint images
   initial_store  setup Metaplex store plus customizations
   mint_more      run candy machine to mint more images
   site_reset     reset customizations to Metaplex store
   site_customize run customizations to Metaplex store

Options:
   -h, --help              print this help message

You can run 'sol-nft-factory <command> -h/--help' to see help for specific command.
EOF
}

initial_full_help_print() {
   cat <<EOF
Usage: sol-nft-factory initial_full <options>

Options:
   -b {PATH}, --banner={PATH}    (optional) set path to custom banner. This can be a local (drop in 'public' folder) or remote location
   -d, --devnet                  set 'devnet' as network
   -e {TEXT}, --header={TEXT}    (optional) set custom header text
   -g {NAME}, --ghname {NAME}    set github username
   -h, --help                    print command line options
   -l {PATH}, --logo={PATH}      (optional) set custom logo path. This can be a local (drop in 'public' folder) or remote location
   -m, --mainnet                 set 'mainnet' as network
   -o, --token                   set github token, requires following permissions: full repo, read:org, write:public_key
   -p {PRICE}, --price={PRICE}   set token price in SOL
   -s {NAME}, --sitename={NAME}  set public DNS name for website for public access
   -t {NAME}, --storename={NAME} (optional) set name of store website to be displayed
   -u {TEXT}, --subheader={TEXT} (optional) set custom subheader text
   -w {ID}, --wallet={ID}        set public wallet key address from Phantom or other source
EOF
}

initial_store_help_print() {
   cat <<EOF
Usage: sol-nft-factory initial_store <options>

Options:
   -b {PATH}, --banner={PATH}    (optional) set path to custom banner. This can be a local (drop in 'public' folder) or remote location
   -e {TEXT}, --header={TEXT}    (optional) set custom header text
   -g {NAME}, --ghname={NAME}    set github username
   -h, --help                    print command line options
   -l {PATH}, --logo={PATH}      (optional) set custom logo path. This can be a local (drop in 'public' folder) or remote location
   -o, --token                   set github token, requires following permissions: full repo, read:org, write:public_key
   -s {NAME}, --sitename={NAME}  set public DNS name for website for public access
   -t {NAME}, --storename={NAME} (optional) set name of store website to be displayed
   -u {TEXT}, --subheader={TEXT} (optional) set custom subheader text
   -w {ID}, --wallet={ID}        set public wallet key address from Phantom or other source
EOF
}

initial_mint_help_print() { # print help text for 'initial_mint' command
    cat <<EOF
Usage: sol-nft-factory initial_mint <options>

Options:
   -d, --devnet                  set 'devnet' as network
   -h, --help                    print command line options
   -m, --mainnet                 set 'mainnet' as network
   -p {PRICE}, --price={PRICE}   set token price in SOL
   -w {ID}, --wallet={ID}        set public wallet key address from Phantom or other source
EOF
}

mint_more_help_print() { # print help text for 'mint_more' command
    cat <<EOF
Usage: sol-nft-factory mint_more <options>

Options:
   -d, --devnet                  set 'devnet' as network
   -h, --help                    print command line options
   -m, --mainnet                 set 'mainnet' as network
   -p {PRICE}, --price={PRICE}   set token price in SOL
EOF
}

site_customize_help_print() {
   cat <<EOF
Usage: sol-nft-factory site_customize <options>

Options:
   -b {PATH}, --banner={PATH}    set path to custom banner. This can be a local (drop in 'public' folder) or remote location
   -e {TEXT}, --header={TEXT}    set custom header text
   -g {NAME}, --ghname {NAME}    set github username
   -h, --help                    print command line options
   -l {PATH}, --logo={PATH}      set custom logo path (local or remote)
   -s {NAME}, --sitename {NAME}  set public DNS name for website for public access
   -t {NAME}, --storename={NAME} set name of store website to be displayed
   -u {TEXT}, --subheader={TEXT} set custom subheader text
   -w {ID}, --wallet={ID}        set public wallet key address from Phantom or other source
EOF
}

site_reset_help_print() {
   cat <<EOF
Usage: sol-nft-factory site_reset <options>

Options:
   -h, --help  print command line options
EOF
}

success_print() { # success print
   echo "${green}${*}${normal}"
}

warn_print() { # warning print
   echo "${orange}${*}${normal}"
}

err_print() { # error print
   echo "${red}${*}${normal}"
}

success_printf() { # printf implementation of success print
   printf "\r\033[K${green}%s\n${normal}" "$*"
}

warn_printf() { # printf impementation of warning print
   printf "\r\033[K${orange}%s${normal}" "$*"
}

err_printf() { # printf impementation of error print
   printf "\r\033[K${red}%s\n${normal}" "$*"
}

shutdown() { # reset cursor in case spinner command errors out
   tput cnorm # reset cursor
}
trap shutdown EXIT

cursorBack() { # move cursor back for spinner animation
   echo -en "\033[$1D"
}

spinner() { # spiner animation so user doesn't think script is hung
   local LC_TYPE=C
   local pid=$!
   local delay=0.1
   #local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
   local spin='◐◓◑◒'
   local charwidth=1

   local i=0
   tput civis # invisible cursor

   while kill -0 $pid 2> /dev/null; do
      local i=$(((i + $charwidth) % ${#spin}))
      printf "${cyan}%s${normal}" "${spin:$i:$charwidth}"
      
      cursorBack $charwidth
      sleep $delay
   done

   tput cnorm
   wait $pid
   return $?
}

check_cmd() { # check if command failed
   if [ $1 -ne 0 ]; then
      err_printf "$2"
      exit 13
   fi
}

bad_opt() { # print error to STDOUT and exit with error code '2'
   echo "${red}$*${normal}" >&2
   help_print
   exit 2
}

need_arg() { # flag that no argument was passed with long flag
   if [ -z "$OPTARG" ]; then
      bad_opt "${red}No argument for --$OPT given!${normal}"
      help_print
   fi
}

check_npm_installed() { # check if specified npm package is installed
   printf "Checking to see if [$1] is installed..."
   npm list -g | grep -q $1
}

install_npm_pkg() { # install npm package quietly
   warn_printf "[$1] not found, installing..."
   sudo npm install -g $1 &>/dev/null
   check_cmd $? "[failed to install $1]"
   success_printf "[$1] installed successfully"
}

check_installed() { # check if package is installed
   printf "Checking to see if [$1] is installed..."
   apt -qq list $1 2>/dev/null | grep -qE "(installed|upgradable)"
}

install_pkg() { # install package quietly
   warn_printf "[$1] not found, installing..."
   sudo apt-get update -qq
   sudo apt-get install -qq $1 &>/dev/null
   check_cmd $? "[failed to install $1]"
   success_printf "[$1] installed successfully"
}

string_contains() { # check if substring ($1) in string ($2), case insensitve search
   local _lc=${2,,}
   [ -z "$1" ] || { [ -z "${_lc##*${1,,}*}" ] && [ -n "$2" ] ;} ;
}

check_alt() {
   if [ "X${distro}" == "X${1}" ]; then
      distro="${2}"
   fi
}

install_prereqs() { # check for and install prereqs
   `sudo apt-update &>/dev/null` # just to prompt for sudo password upfront

   # install pre-requisites
   if [ "${subcommand}" = "initial_mint" ]; then
      if check_installed curl; then
         success_printf "[curl] found."
      else
         install_pkg curl
      fi
   fi

   if check_installed gcc; then
      success_printf "[gcc] found."
   else
      install_pkg gcc
   fi

   if check_installed g++; then
      success_printf "[g++] found."
   else
      install_pkg g++
   fi

   if check_installed make; then
      success_printf "[make] found."
   else
      install_pkg make
   fi

   if check_installed apt-transport-https; then
      success_printf "[apt-transport-https] found."
   else
      install_pkg apt-transport-https
   fi

   if check_installed lsb-release; then
      success_printf "[lsb-release] found."
   else
      install_pkg lsb-release
   fi

   if check_installed gnupg; then
      success_printf "[gnupg] found."
   else
      install_pkg gnupg
   fi

   printf "Checking to see if [nodejs] installed..."
   if node --version &>/dev/null; then
      success_printf "[nodejs] found"
   else
      node_repo="node_14.x" # v16 was giving issues with latest metaplex build
      distro=$(lsb_release -c -s)

      check_alt "solydxk-9"       "stretch"
      check_alt "sana"            "jessie"
      check_alt "kali-rolling"    "bullseye"
      check_alt "Tyche"           "stretch"
      check_alt "Nibiru"          "buster"
      check_alt "Horizon"         "stretch"
      check_alt "Continuum"       "stretch"
      check_alt "patito feo"      "buster"
      check_alt "maya"            "precise"
      check_alt "qiana"           "trusty"
      check_alt "rafaela"         "trusty"
      check_alt "rebecca"         "trusty"
      check_alt "rosa"            "trusty"
      check_alt "sarah"           "xenial"
      check_alt "serena"          "xenial"
      check_alt "sonya"           "xenial"
      check_alt "sylvia"          "xenial"
      check_alt "tara"            "bionic"
      check_alt "tessa"           "bionic"
      check_alt "tina"            "bionic"
      check_alt "tricia"          "bionic"
      check_alt "ulyana"          "focal"
      check_alt "ulyssa"          "focal"
      check_alt "uma"             "focal"
      check_alt "betsy"           "jessie"
      check_alt "cindy"           "stretch"
      check_alt "debbie"          "buster"
      check_alt "luna"            "precise"
      check_alt "freya"           "trusty"
      check_alt "loki"            "xenial"
      check_alt "juno"            "bionic"
      check_alt "hera"            "bionic"
      check_alt "odin"            "focal"
      check_alt "toutatis"        "precise"
      check_alt "belenos"         "trusty"
      check_alt "flidas"          "xenial"
      check_alt "etiona"          "bionic"
      check_alt "lugalbanda"      "xenial"
      check_alt "anokha"          "wheezy"
      check_alt "anoop"           "jessie"
      check_alt "drishti"         "stretch"
      check_alt "unnati"          "buster"
      check_alt "bunsen-hydrogen" "jessie"
      check_alt "helium"          "stretch"
      check_alt "lithium"         "buster"
      check_alt "chromodoris"     "jessie"
      check_alt "green"           "sid"
      check_alt "amber"           "buster"
      check_alt "jessie"          "jessie"
      check_alt "ascii"           "stretch"
      check_alt "beowulf"         "buster"
      check_alt "ceres"           "sid"
      check_alt "panda"           "sid"
      check_alt "unstable"        "sid"
      check_alt "stable"          "buster"
      check_alt "onyedi"          "stretch"
      check_alt "lemur-3"         "stretch"
      check_alt "orel"            "stretch"
      check_alt "dolcetto"        "stretch"

      if [ -f "/etc/apt/sources.list.d/chris-lea-node_js-$distro.list" ]; then # remove Launchpad PPA repo, if found
         $(sudo add-apt-repository -y -r ppa:chris-lea/node.js)
         $(sudo rm -f /etc/apt/sources.list.d/chris-lea-node_js-${distro}.list)
      fi

      keyring='/usr/share/keyrings'
      local_node_key="$keyring/nodesource.gpg"

      curl -s "https://deb.nodesource.com/gpgkey/nodesource.gpg.key" | gpg --dearmor | sudo tee $local_node_key >/dev/null

      echo "deb [signed-by=$local_node_key] https://deb.nodesource.com/${node_repo} ${distro} main" | sudo tee /etc/apt/sources.list.d/nodesource.list &>/dev/null
      echo "deb-src [signed-by=$local_node_key] https://deb.nodesource.com/${node_repo} ${distro} main" | sudo tee -a /etc/apt/sources.list.d/nodesource.list &>/dev/null
      install_pkg nodejs
   fi

   # check if 'yarn' is installed, install if not
   if check_npm_installed yarn; then
      success_printf "[yarn] found."
   else
      install_npm_pkg yarn
   fi

   # check if 'git' is installed, install if not
   if check_installed git; then
      success_printf "[git] found."
   else
      install_pkg git
   fi

   # check if 'ts-node' installed, install if not
   if check_npm_installed ts-node; then
      success_printf "[ts-node] found."
   else
      install_npm_pkg ts-node
   fi

   # check if solana is installed, install if not
   printf "Checking to see if [solana] installed..."
   if solana --version &>/dev/null; then
      success_printf "[solana] found."
   else
      warn_printf "[solana] not found, installing..."
      sh -c "$(curl -sSfL https://release.solana.com/v1.8.0/install)" &>/dev/null &
      spinner
      check_cmd $? "failed to install [solana]"
      . ~/.profile # source .profile so PATH updates in current session
      success_printf "[solana] installed successfully."
   fi
}

candy_machine() {
   solana config set --url https://api.${network}.solana.com >/dev/null # set solana network
   check_cmd $? "unable to set Solana network"
   keyJSON="${HOME}/.config/solana/wallet.json"

   if [ ! -f $keyJSON ]; then # only if keypair doesn't exist
      echo "${orange}Note: You will need your recovery phrase to import wallet. This is required by Solana CLI and will not be saved by this script nor on the system anywhere. The input is silent as well so no one can see the input as you type it in or paste it!${normal}"
      solana-keygen recover 'prompt://?key=0/0' --outfile $keyJSON
      check_cmd $? "failed to import wallet."
   fi

   solana config set --keypair $keyJSON >/dev/null # set Solana CLI to use wallet
   check_cmd $? "unable to set keypair"
   success_print "set keypair successfully."

   if [ "${network}" = "devnet" ]; then # only airdrop if running on devnet
      solana airdrop 1 &>/dev/null #airdrop some SOL
      check_cmd $? "airdrop to wallet failed."
      success_print "airdropped 1 SOL."
   fi

   if [ ! -d $assets_dir ]; then # only if directory doesn't exist
      printf "Creating directory for images..."
      mkdir $assets_dir &>/dev/null # create directory for assests
      check_cmd $? "failed to create [$assets_dir}]."
      success_printf "Directory [${assets_dir}] created successfully."
   fi

   printf "${orange}********************************************************************************************************************************************\nPausing to allow time to upload images and JSON files to [${assets_dir}]. Refer to the README for further\ninformation on properly setting up your images and JSON files.\n********************************************************************************************************************************************\n${normal}"
   read -r -s -N 1 -p "Press [Enter] to continue..." key
   echo ""

   cd ${current_dir} # go back to starting location to save mint cache there

   printf "Uploading images for candy machine..."
   ts-node $cm_cli upload $assets_dir --env ${network} --keypair ${keyJSON} 2>>${log_file} 1>/dev/null &
   spinner
   check_cmd $? "failed to upload images."
   success_printf "Image upload successful."

   read -p "What would you like the price of the NFTs to be (in SOL): " price

   printf "Creating candy machine..."
   ts-node $cm_cli create_candy_machine --env ${network} --keypair ${keyJSON} --price ${price} 2>>${log_file} 1>/dev/null &
   spinner
   check_cmd $? "failed to create candy machine."
   success_printf "Candy machine created successfully."

   start_of_today=`date '+%d %b %Y 00:00:00 %Z'`
   printf "Updating candy machine with available minting start date to [${start_of_today}]..."
   ts-node $cm_cli update_candy_machine --env ${network} --keypair ${keyJSON} --date "${start_of_today}" 2>>${log_file} 1>/dev/null &
   spinner
   check_cmd $? "failed to update candy machine."
   success_printf "Date updated successfully."

   num_imgs=$((`ls ${assets_dir} | wc -l` / 2 )) # get number of images in assets directory
   count=0 # used in progress print

   for i in $(seq $num_imgs); do # mint images, one at a time
      printf "\rMinting operation ongoing, successfully minted [${count}/${num_imgs}]..."
      ts-node $cm_cli mint_one_token -e ${network} -k ${keyJSON} 2>>${log_file} 1>/dev/null &
      spinner
      check_cmd $? "unable to mint image."
      count=$((count+1))
   done
   printf "\r\033[K" # return cursor to beginning and clear
   success_print "[${count}] images successfully minted."

   printf "Signing tokens..."
   ts-node $cm_cli sign_all -e ${network} -k ${keyJSON} 2>>${log_file} 1>/dev/null &
   spinner
   check_cmd $? "unable to sign tokens."
   success_printf "Tokens signed successfully."

   echo ""
   echo "${green}Thanks for using this script! If you found it useful, please consider donating! SOL Wallets: [A2CWE3TUqMBNfbnksZNa67N9b9t76jjNCm9H1Jm4DQYt] [9inpsvQZYiTekRJEuNBLjPjNoQzSCDx9iuHMq3uTzssB]${normal}"
}

package_json_changes() {
   package_json="${web_dir}/package.json"
   # Change the owner name of the repository for Metaplex."
   sed -i 's/metaplex-foundation/'${github_name}'/g' ${package_json}
   # Modify Asset Prefix in package.json line 56.
   sed -i "s|ASSET_PREFIX=/metaplex/|ASSET_PREFIX=|" ${package_json}
   # Change access to SSH based so there is no prompt for username/password
   sed -i "s|https://github.com/|git@github.com:|" ${package_json}
   # Set wallet address
   sed -i "s/REACT_APP_STORE_OWNER_ADDRESS_ADDRESS=/REACT_APP_STORE_OWNER_ADDRESS_ADDRESS=${pubkey}/" ${web_dir}/.env
   # Add CNAME
   echo ${sitename} > ${web_dir}/public/CNAME
}

metaplex_setup() {
   # clone metaplex repo
   if [ ! -d "${metaplex_dir}" ]; then # only clone if not already existing
      printf "cloning [metaplex] repo..."
      if [ "${subcommand}" = "init_mint" ]; then
         metaplex_clone="git@github.com:metaplex-foundation/metaplex.git"
      else
         metaplex_clone="git@github.com:${github_name}/metaplex.git"
      fi

      echo "|1|RCKrz56TU4Et69sBFuVfVRPHBfM=|64rY1Ne/MOwAtzNnN9Rl+qMbXmM= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" > ${HOME}/.ssh/known_hosts
      git clone ${metaplex_clone} &>/dev/null &
      spinner
      if [ $? -eq 128 ]; then
         gh repo fork metaplex-foundation/metaplex --clone --remote &>/dev/null &
         spinner
      fi
      check_cmd $? "failed to clone [metaplex] repo."
      success_printf "[metaplex] repo cloned successfully."
   fi

   cd $js_dir

   if [ ! -d "${js_dir}/node_modules" ]; then # only if modules not installed
      printf "Installing node modules..."
      yarn install --silent 2>>${log_file} & # install required npm modules
      spinner
      check_cmd $? "failed to install node modules."
      success_printf "Node modules installed successfully."
   fi

   if [ "${subcommand}" = "initial_full" ] || [ "${subcommand}" = "initial_store" ]; then
      printf "Bundling app into static files for production..."
      yarn build 2>>${log_file} 1>/dev/null &
      spinner
      check_cmd $? "failed to bundle app"
      success_printf "Bundle completed successfully."

      printf "Creating bootstrap..."
      yarn bootstrap 2>>${log_file} 1>/dev/null &
      spinner
      check_cmd $? "failed to create bootstrap"
      success_printf "Bootsrap completed successfully."

      package_json_changes

      cd ${web_dir}

      site_custom

      printf "Deploying website back to Github..."
      yarn deploy 2>>${log_file} 1>/dev/null &
      spinner
      check_cmd $? "failed to deploy website"
      success_printf "Website deployed successfully."

      if [ "${subcommand}" = "initial_store" ]; then
         echo ""
         echo "${green}Thanks for using this script! If you found it useful, please consider donating! SOL Wallets: [A2CWE3TUqMBNfbnksZNa67N9b9t76jjNCm9H1Jm4DQYt] [9inpsvQZYiTekRJEuNBLjPjNoQzSCDx9iuHMq3uTzssB]${normal}"
      fi
   fi
}

site_reset () { # Revert customizations back to original
   printf "Reverting changes..."
   # Revert website name change
   sed -i "s|<title>.*</title>|<title>Metaplex NFT Marketplace</title>|" ${sitepath}/pages/_app.tsx
   check_cmd $? "Unable to revert changes"
   sed -i "s|<meta name=\"description\" content=\".*\" />|<meta name=\"description\" content=\"Metaplex NFT Marketplace\" />|" ${sitepath}/pages/_document.tsx
   check_cmd $? "Unable to revert changes"
   
   # Revert website logo
   sed -i "s|img src={.*}|img src={'/metaplex-logo.svg'}|" ${sitepath}/views/home/auctionList.tsx
   check_cmd $? "Unable to revert changes"
   sed -i "s/background-size: 100% 100%;/background-size: 924px 100%;/" ${sitepath}/components/Banner/index.less
   check_cmd $? "Unable to revert changes"
   sed -i "s/${no_gradient}/${gradient}/" ${sitepath}/components/Banner/index.less
   check_cmd $? "Unable to revert changes"
   
   # Revert website banner
   sed -i "s|src=\".*\"|src=\"/main-banner.svg\"|" ${sitepath}/views/home/auctionList.tsx
   check_cmd $? "Unable to revert changes"
   
   # Revert header text change
   sed -i "s/headingText=\".*\"/headingText=\"The amazing world of Metaplex.\"/" ${sitepath}/views/home/auctionList.tsx
   check_cmd $? "Unable to revert changes"

   # Revert subheader text change
   sed -i "s/subHeadingText=\".*\"/subHeadingText=\"Buy exclusive Metaplex NFTs.\"/" ${sitepath}/views/home/auctionList.tsx
   check_cmd $? "Unable to revert changes"

   success_printf "Changes reverted successfully."
}

site_custom() { # run customizations of website
   if [ "${subcommand}" = "site_customize" ]; then # check for input if being called directly
      if [ "${banner}" = "" && "${header}" = "" && "${ghname}" == "" && "${logo}" = "" && "${sitename}" = "" && "${storename}" = "" && "${subheader}" = "" && "${pubkey}" = "" ]; then # no flags passed, nothing to customize
         err_print "No customization flags passed! Please pass at least one flag!"
         site_customize_help_print
         exit 16
      fi
   fi

   if [ "${storename}" != "" ]; then # Website name change
      printf "Changing website name..."
      sed -i "s|Metaplex NFT Marketplace|${storename}|" ${sitepath}/pages/_app.tsx
      check_cmd $? "Unable to set name."
      sed -i "s|Metaplex NFT Marketplace|${storename}|" ${sitepath}/pages/_document.tsx
      check_cmd $? "Unable to set name."
      success_printf "Website name changed successfully."
   fi

   if [ "${logo_path}" != "" ]; then # Site Logo change
      printf "Changing website logo..."
      sed -i "s|img src={'/metaplex-logo.svg'}|img src={'${logo_path}'}|" ${sitepath}/views/home/auctionList.tsx
      check_cmd $? "Unable to change logo."
      sed -i "s/background-size: 924px 100%;/background-size: 100% 100%;/" ${sitepath}/components/Banner/index.less
      check_cmd $? "Unable to change logo size."
      sed -i "s/${gradient}/${no_gradient}/" ${sitepath}/components/Banner/index.less
      check_cmd $? "Unable to remove gradient."
      success_printf "Website logo changed successfully."
   fi

   if [ "${banner}" != "" ]; then # Banner image change
      printf "Changing banner image..."
      sed -i "s|/main-banner.svg|${banner}|" ${sitepath}/views/home/auctionList.tsx
      check_cmd $? "Unable to change banner image."
      success_printf "Banner image changed successfully."
   fi

   if [ "${header}" != "" ]; then # Header text change
      printf "Changing header text..."
      sed -i "s/The amazing world of Metaplex./${header}/" ${sitepath}/views/home/auctionList.tsx
      check_cmd $? "Unable to change header text."
      success_printf "Header text changed successfully."
   fi

   if [ "${subheader}" != "" ]; then # Subheader text change
      printf "Changing subheader text..."
      sed -i "s/Buy exclusive Metaplex NFTs./${subheader}/" ${sitepath}/views/home/auctionList.tsx
      check_cmd $? "Unable to change subheader text."
      success_printf "Subheader text changed successfully."
   fi
}

init_full() {
   ## CHECK REQUIRED FLAGS
   if [ "${github_name}" = "" ]; then
      err_print "Fatal: Github username not set!"
      warn_print "Pass the [-g] flag along with your Github username."
      initial_full_help_print
      exit 2
   fi

   if [ "${network}" = "" ]; then
      err_print "Fatal: Solana network not set!"
      warn_print "Pass the [-d] flag for devnet or the [-m] flag for mainnet"
      initial_full_help_print
      exit 3
   fi

   if [ "${pubkey}" = "" ]; then
      err_print "Fatal: Wallet address required!"
      warn_print "Pass the [-w] flag followed by your wallet address"
      initial_full_help_print
      exit 4
   fi

   if [ "${sitename}" = "" ]; then
      err_print "Fatal: DNS name not set!"
      warn_print "Pass the [-s] flag along with the DNS name for the store website"
      initial_full_help_print
      exit 5
   fi

   if [ ${price} -eq 0 ]; then
      err_print "Fatal: No price set!"
      warn_print "Pass the [-p] flag followed by a desired price, in SOL"
      initial_full_help_print
      exit 6
   fi

   ssh_key_check

   install_prereqs

   metaplex_setup

   candy_machine

   exit 0 # normal exit
}

init_mint() {
   ## CHECK REQUIRED FLAGS
   if [ "${network}" = "" ]; then
      err_print "Fatal: Solana network not set!"
      warn_print "Pass the [-d] flag for devnet or the [-m] flag for mainnet"
      init_mint_help_print
      exit 3
   fi

   if [ "${pubkey}" = "" ]; then
      err_print "Fatal: Wallet address required!"
      warn_print "Pass the [-n] flag to create a new wallet or the [-w] flag followed by your wallet address"
      init_mint_help_print
      exit 4
   fi

   if [ ${price} -eq 0 ]; then
      err_print "Fatal: No price set!"
      warn_print "Pass the [-p] flag followed by a desired price, in SOL"
      init_mint_help_print
      exit 6
   fi

   install_prereqs

   metaplex_setup

   candy_machine

   exit 0 # normal exit
}

init_store() {
   ## CHECK REQUIRED FLAGS
   if [ "${github_name}" = "" ]; then
      err_print "Fatal: Github username not set!"
      warn_print "Pass the [-g] flag along with your Github username."
      initial_store_help_print
      exit 2
   fi

   if [ "${pubkey}" = "" ]; then
      err_print "Fatal: Wallet address required!"
      warn_print "Pass the [-w] flag followed by your wallet address"
      initial_store_help_print
      exit 3
   fi

   if [ "${sitename}" = "" ]; then
      err_print "Fatal: DNS name not set!"
      warn_print "Pass the [-s] flag along with the DNS name for the store website"
      initial_store_help_print
      exit 4
   fi

   ssh_key_check

   install_prereqs

   metaplex_setup

   exit 0 # normal exit
}

mint() {
   if [ ! -f "${HOME}/.config/solana/wallet.json" ]; then
      err_print "Solana keypair not found! Please run 'initial_mint' to setup environment properly!"
      exit 14
   fi

   if [ "${network}" = "" ]; then
      err_print "Fatal: Solana network not set!"
      warn_print "Pass the [-d] flag for devnet or the [-m] flag for mainnet"
      mint_more_help_print
      exit 3
   fi

   if [ ${price} -eq 0 ]; then
      err_print "Fatal: No price set!"
      warn_print "Pass the [-p] flag followed by a desired price, in SOL"
      mint_more_help_print
      exit 6
   fi

   rm -rf "${current_dir}/.cache" &>/dev/null

   candy_machine

   exit 0
}

check_token() {
   if [ "${gh_token}" = "" ]; then
      err_print "Fatal: SSH key not found on system, github token required!"
      warn_print "Pass the [-o] flag along with github token."

      if [ "${subcommand}" = "initial_full" ]; then
         initial_full_help_print
      else
         initial_store_help_print
      fi
      exit 18
   fi
}

ssh_key_create() { # create SSH key if not found
   sudo apt update &>/dev/null # just to prompt for sudo password
   printf "Checking to see if [gh] installed..."
   if gh --version &>/dev/null; then
      success_printf "[gh] found"
   else
      # install pre-requisites
      if check_installed curl; then
         success_printf "[curl] found."
      else
         install_pkg curl
      fi

      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg &>/dev/null
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      install_pkg gh
      echo "${gh_token}" > token.txt
      gh auth login --with-token < token.txt
      check_cmd $? "Unable to authorize github login"
      rm token.txt
   fi

   printf "SSH key not found, generating..."
   ssh-keygen -t ed25519 -f ${ssh_priv} -q -N "" 2>${log_file}
   check_cmd $? "SSH failed to generate"
   eval "$(ssh-agent -s)" 2>${log_file} 1>/dev/null
   check_cmd $? "Failed to start SSH agent"
   ssh-add ${ssh_priv} 2>${log_file} 1>/dev/null
   check_cmd $? "Failed to add SSH key"
   gh ssh-key add ${ssh_pub} -t "candy_machine" 2>${log_file} 1>/dev/null
   check_cmd $? "Unable to add SSH key to github account"

   success_printf "SSH key added to github account."
}

ssh_key_check() { # check if ssh key exists on system
   if [ ! -d "${HOME}/.ssh" ]; then
      check_token
      ssh_key_create
   fi

   if [ ! -f "${HOME}/.ssh/id_rsa.pub" ] && [ ! -f "${HOME}/.ssh/id_ecdsa.pub" ] && [ ! -f "${ssh_pub}" ]; then
      check_token
      ssh_key_create
   fi
}

## USER INPUT
while getopts ":h-:" OPT; do
   if [ "$OPT" = "-" ]; then  # long option support
      OPT="${OPTARG%%=*}"     # extract long option name
      OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
      OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
   fi

   case "$OPT" in
      h | help )        help_print; exit 0 ;;               # print help
      ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
      ? )               bad_opt "Unknown option" ;;         # bad short option
   esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

subcommand=$1; shift # remove script name from arg list
case "$subcommand" in
   initial_full)
      while getopts ":b:de:g:hl:mo:p:s:t:u:w:-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            b | banner )      banner="${OPTARG}";;                # get path to banner image
            d | devnet )      network='devnet' ;;                 # set devnet
            e | header )      header="${OPTARG}";;                # set header text
            g | ghname)       github_name="${OPTARG}";;           # set github username
            h | help )        initial_full_help_print; exit 0;;   # print help
            l | logo )        logo_path="${OPTARG}";;             # set logo path
            m | mainnet )     network='mainnet-beta' ;;           # set mainnet
            o | token )       gh_token="${OPTARG}";;              # set gh token
            p | price )       price="${OPTARG}";;                 # set price of tokens
            s | sitename )    sitename="${OPTARG}";;              # set DNS name for site
            t | storename )   storename="${OPTARG}";;             # set website display name
            u | subheader )   subheader="${OPTARG}";;             # Set subheader text
            w | wallet )      pubkey="${OPTARG}" ;;               # set public wallet key address
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unkown option" ;;          # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
   initial_mint)
      while getopts ":dhmp:w:-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            d | devnet )      network='devnet' ;;                 # set devnet
            h | help )        initial_mint_help_print; exit 0;;   # print help
            m | mainnet )     network='mainnet-beta' ;;           # set mainnet
            p | price )       price="${OPTARG}";;                 # set price of tokens
            w | wallet )      pubkey="${OPTARG}" ;;               # set public wallet key address
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unkown option" ;;          # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
   initial_store)
      while getopts ":b:e:g:hl:o:s:t:u:w:-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            b | banner )      banner="${OPTARG}";;                # get path to banner image
            e | header )      header="${OPTARG}";;                # set header text
            g | ghname)       github_name="${OPTARG}";;           # set github username
            h | help )        initial_store_help_print; exit 0;;  # print help
            l | logo )        logo_path="${OPTARG}";;             # set logo path
            o | token )       gh_token="${OPTARG}";;              # set gh token
            s | sitename )    sitename="${OPTARG}";;              # set DNS name for site
            t | storename )   storename="${OPTARG}";;             # set website display name
            u | subheader )   subheader="${OPTARG}";;             # Set subheader text
            w | wallet )      pubkey="${OPTARG}" ;;               # set public wallet key address
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unkown option" ;;          # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
   mint_more)
      while getopts ":dhmp:-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            d | devnet )      network='devnet' ;;                 # set devnet
            h | help )        mint_more_help_print; exit 0;;      # print help
            m | mainnet )     network='mainnet-beta' ;;           # set mainnet
            p | price )       price="${OPTARG}";;                 # set price of tokens
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unknown option" ;;         # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
   site_customize)
      while getopts ":b:e:g:hl:s:t:u:w:-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            b | banner )      banner="${OPTARG}";;                # get path to banner image
            e | header )      header="${OPTARG}";;                # set header text
            g | ghname)       github_name="${OPTARG}";;           # set github username
            h | help )        site_customize_help_print; exit 0;; # print help
            l | logo )        logo_path="${OPTARG}";;             # set logo path
            s | sitename )    sitename="${OPTARG}";;              # set DNS name for site
            u | subheader )   subheader="${OPTARG}";;             # Set subheader text
            t | storename )   storename="${OPTARG}";;             # set website display name
            w | wallet )      pubkey="${OPTARG}" ;;               # set public wallet key address
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unkown option" ;;          # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
   site_reset)
      while getopts ":h-:" opt; do
         if [ "$OPT" = "-" ]; then  # long option support
            OPT="${OPTARG%%=*}"     # extract long option name
            OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
            OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
         fi

         case ${opt} in
            h | help )        siet_reset_help_print; exit 0;;     # print help
            ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
            ? )               bad_opt "Unkown option" ;;          # bad short option
         esac
      done
      shift $((OPTIND-1))
      ;;
esac

# MAIN SCRIPT
if [ "${subcommand}" = "" ]; then
   err_print "Fatal: no command passed!"
   help_print
   exit 1
elif [ "${subcommand}" = "initial_mint" ]; then
   clear # Start with a fresh screen
   init_mint
elif [ "${subcommand}" = "mint_more" ]; then
   clear # Start with a fresh screen
   mint
elif [ "${subcommand}" = "initial_full" ]; then
   clear # Start with a fresh screen
   init_full
elif [ "${subcommand}" = "initial_store" ]; then
   clear # Start with a fresh screen
   init_store
elif [ "${subcommand}" = "site_customize" ]; then
   clear # Start with a fresh screen
   site_custom
elif [ "${subcommand}" = "site_reset" ]; then
   clear # Start with a fresh screen
   site_reset
else
   err_print "Fatal: unknonw command!"
   help_print
   exit 1
fi